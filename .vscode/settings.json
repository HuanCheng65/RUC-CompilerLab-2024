{
    "clangd.path": "/usr/bin/clangd",
    "clangd.arguments": [
        // 全局补全(输入时弹出的建议将会给出不在当前作用域可见的索引，插入后将自动补充作用域标识符)
        //如，在`int main()`中直接写`cout`，
        //    即使没有`#include <iostream>`，也会给出`std::cout`的建议
        //    配合"--header-insertion=iwyu" (见下)，还可自动插入缺失的头文件
        "--all-scopes-completion",
        // 后台分析并保存索引文件
        "--background-index",
        // 启用 Clang-Tidy 以提供「静态检查」
        "--clang-tidy",
        // 当 clangd 准备就绪时，用它来分析建议
        "--completion-parse=auto",
        // 建议风格：打包(重载函数只会给出一个建议）；反可以设置为 detailed
        "--completion-style=bundled",
        // 启用读取项目配置文件和用户配置文件，其设置格式均为YAML
        //项目配置文件是在项目文件夹里的“.clangd”
        //用户配置文件是“clangd/config.yaml”，该文件来自如下目录
        //    Windows: %USERPROFILE%\AppData\Local
        //    MacOS: ~/Library/Preferences/
        //    Others: $XDG_CONFIG_HOME, usually ~/.config
        "--enable-config",
        // 默认格式化风格: 在 clangd 没能找到 .clang-format 文件时采用
        //这里用的谷歌开源项目代码风格（可用的有 LLVM, Google, Chromium, Mozilla, Webkit, Microsoft, GNU 等）
        "--fallback-style=Webkit",
        // 启用这项时，补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末
        //我选择禁用
        "--function-arg-placeholders=false",
        // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分
        "--header-insertion-decorators",
        // 插入建议时自动补充头文件
        "--header-insertion=iwyu",
        // 为标准库头文件启用清理功能（不成熟！）
        // "--include-cleaner-stdlib",
        // 让 Clangd 生成更详细的日志
        "--log=verbose",
        // pch优化的位置 (memory 或 disk，选择memory会增加内存开销，但会提升性能)
        "--pch-storage=memory",
        // 输出的 JSON 文件更美观
        "--pretty",
        // 建议的排序方案：hueristics (启发式), decision_forest (决策树)
        //我采用决策树
        "--ranking-model=decision_forest",
        // 同时开启的任务数量
        "-j=12"
    ],
    "clangd.fallbackFlags": [
        "-std=c++23",
    ],
    "clangd.onConfigChanged": "restart",
    "clangd.serverCompletionRanking": true,
    "clangd.detectExtensionConflicts": true,
}